/**
    A Grammar for CSS
    
    This grammar is intentionally lenient/forgiving. 
    The purpose is to highlight, not validate (possibly invalid) CSS.
    
*/

@symbols = '//';
@singleLineComments = '//';
@multiLineComments = '/*' '*/';
@wordState = '-' '@';

@start                  
@before {
    PKTokenizer *t = self._tokenizer;

    // symbols
    [t.symbolState add:@"/*"];
    [t.symbolState add:@"*/"];
    [t.symbolState add:@"//"];

    // word chars -moz, -webkit, @media
    [t setTokenizerState:t.wordState from:'-' to:'-'];
    [t.wordState setWordChars:YES from:'-' to:'-'];
    [t.wordState setWordChars:YES from:'@' to:'@'];
    [t.wordState setFallbackState:t.symbolState from:'-' to:'-'];
    [t.wordState setFallbackState:t.symbolState from:'@' to:'@'];

    // comments
    [t setTokenizerState:t.commentState from:'/' to:'/'];
    [t.commentState addSingleLineStartMarker:@"//"];
    [t.commentState addMultiLineStartMarker:@"/*" endMarker:@"*/"];
}
                        = ruleset*;
ruleset                 = selectors openCurly decls closeCurly;
selectors               = selector commaSelector*;
selector                = (selectorWord | hashSym | dot | colon | gt | openBracket | closeBracket | eq | selectorQuotedString | tilde | pipe)+;
selectorWord            = Word;
selectorQuotedString    = QuotedString;
commaSelector           = comma selector;
decls                   = Empty | actualDecls;
actualDecls             = decl decl*;
decl                    = property colon expr important? semi;
property                = Word;
expr                    = (string | constant | num | openParen | closeParen | comma | fwdSlash)+;
important               = bang Word;
string                  = QuotedString;
constant                = Word;

openCurly       = '{';
closeCurly      = '}';
openBracket     = '[';
closeBracket    = ']';
eq              = '=';
comma           = ',';
colon           = ':';
semi            = ';';
openParen       = '(';
closeParen      = ')';
gt              = '>';
tilde           = '~';
pipe            = '|';
fwdSlash        = '/';
hashSym         = '#';
dot             = '.';
at              = '@';
bang            = '!';

num = Number;